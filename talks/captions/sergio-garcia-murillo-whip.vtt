WEBVTT

1
00:07.200 --> 00:09.330
<v ->Being not an end-to-end but</v>

2
00:09.330 --> 00:11.000
a peer-to-peer technology and

3
00:11.000 --> 00:12.120
multi conferencing is the

4
00:12.120 --> 00:13.700
main use-case,

5
00:13.700 --> 00:14.870
the perception of the broadcasting industry

6
00:14.870 --> 00:17.209
around WebRTC has never been very good.

slide-2
00:17.209 --> 00:19.462
And it has never been seen

8
00:19.462 --> 00:21.990
as a viable

9
00:21.990 --> 00:23.233
solution for streaming media because it doesn't scale.

10
00:23.233 --> 00:24.660
It is weak on quality at best

11
00:24.660 --> 00:25.720
and it is hard to use.

slide-3
00:25.720 --> 00:28.760
The industry is really dominated by video-on-demand models

13
00:30.800 --> 00:31.755
like Netflix, the Hulu,

14
00:31.755 --> 00:32.767
or even Disney with does not require real-time.

15-p
00:33.850 --> 00:35.660
However,

16
00:35.660 --> 00:36.560
the pandemic has really changed all of this

17
00:36.560 --> 00:37.990
and it has accelerated the adoption

18
00:37.990 --> 00:39.880
of real-time media workflows

19
00:39.880 --> 00:42.330
that have finally bridged the gap between web and broadcast.

20-p
00:43.373 --> 00:46.360
real-time media has enabled a need for interactivity

21
00:46.360 --> 00:47.193
that requires near zero latency.

22
00:48.640 --> 00:51.350
with new use cases that big professional-grade workflows

23
00:51.350 --> 00:55.500
possible in consumer grade devices.

slide-4
00:55.500 --> 00:57.170
WebRTC is the perfect technology for delivering

25
00:57.170 --> 00:58.830
these real-time media.

slide-5
00:58.830 --> 01:01.600
It did what it was designed for in the beginning.

slide-6
01:01.600 --> 01:03.540
And despite some misconceptions,

28
01:03.540 --> 01:05.940
it is possible to deliver a high quality media

29
01:05.940 --> 01:08.510
with broadcast quality at a web scale

30
01:08.510 --> 01:10.980
with additional properties like end-to-end encryption or simulcast streaming support.

slide-7
01:12.920 --> 01:16.300
However, the lack of a standard signaling protocol

32
01:16.300 --> 01:19.930
has made it impossible for WebRTC to use a wide range of

33
01:19.930 --> 01:22.400
tools available and use on a daily basis

34
01:22.400 --> 01:23.800
by the streaming world.

35
01:23.800 --> 01:26.253
For example, OBS, FFmpeg, or vMix.

36-p
01:27.214 --> 01:30.740
Not to mention that the lack of hardware encoders and physical input sources

37
01:30.740 --> 01:32.340
that are available here and integrated

38
01:32.340 --> 01:34.790
into many professional media workflows.

slide-8
01:35.750 --> 01:37.560
In the broadcasting industry, RTMP

40
01:37.560 --> 01:38.700
is still ubiquitous for

41
01:38.700 --> 01:42.600
live streaming and for media ingest, into hundreds or so media platforms.

slide-9
01:43.520 --> 01:45.850
WebRTC offers a lot of technical advantages

43
01:45.850 --> 01:49.180
when doing live media ingest like with network resiliency

44
01:49.180 --> 01:50.310
without increasing

45
01:50.310 --> 01:53.343
the end to end delay, by using SVC codec or

46
01:56.180 --> 01:58.970
simulcast where they reuse the server (?) required, with per-codec choices like VP9 or AV1,

47
01:58.970 --> 02:01.659
an end to end content as video for content,

48
02:01.659 --> 02:03.840
but over the delivering network.

slide-10
02:03.840 --> 02:06.770
When we tried to use WebRTC for media ingest,

50
02:06.770 --> 02:09.370
we realized that while WebRTC is the best media transport

51
02:09.370 --> 02:12.180
protocol for real time streaming, the lack of a

52
02:12.180 --> 02:14.700
standard protocol has made that each WebRTC streaming

53
02:14.700 --> 02:18.550
service requires implementing a custom ad-hoc protocol,

54
02:18.550 --> 02:19.910
making it a no-go for hardware encoders and broadcasting tools to adopt it.

55-p
02:23.380 --> 02:25.350
Other media transports could be used for ingest,

56
02:25.350 --> 02:28.990
but using WebRTC for both ingest and delivery allow to

57
02:28.990 --> 02:32.470
work natively in browsers avoids protocol translation which

58
02:32.470 --> 02:35.130
adds delays and implementation complexity.

59
02:35.130 --> 02:38.110
Avoiding the transcoding by setting

60
02:38.110 --> 02:42.620
common codecs and use WebRTC features into it.

slide-11
02:42.620 --> 02:43.700
So the solution is simple,

62
02:43.700 --> 02:46.340
we just need a reference signal protocol.

63
02:46.340 --> 02:49.950
The requirements for this new protocol would be that it might

64
02:49.950 --> 02:51.690
be simpler to implement.

65
02:51.690 --> 02:56.180
And easy to use at the current RTMP URI, support this

66
02:56.180 --> 02:58.480
specific ingest use-case

67
02:58.480 --> 03:01.530
which is a subset of the WebRTC

68
03:01.530 --> 03:03.570
possible use cases because we

69
03:03.570 --> 03:06.160
only need support for unidirectional flows.

70
03:06.160 --> 03:09.300
And we don't need support for re-negotiations.

71-p
03:09.300 --> 03:12.540
We need to be fully compliant with WebRTC and RTCWeb specs

72
03:12.540 --> 03:14.350
but we have to lower

73
03:14.350 --> 03:17.410
their requirements and the complexity

74
03:17.410 --> 03:20.400
to reimplement it so it can be adopted by both

75
03:20.400 --> 03:22.393
hardware encoders and brodcasting tools.

slide-12
03:23.460 --> 03:26.511
One thing that was clear to us is there was that this new

77
03:26.511 --> 03:27.548
protocol should reuse

78
03:27.548 --> 03:29.100
the current Web technologies

79
03:29.100 --> 03:30.490
as much as possible.

80
03:30.490 --> 03:35.490
So we did use HTTP post for exchanging the SDP offer offer and answer.

81
03:35.500 --> 03:37.140
And the connection state is controlled

82
03:37.140 --> 03:40.900
by the WebRTC ICE states.

84
03:41.600 --> 03:44.580
The authentication is supported by

85
03:44.580 --> 03:49.800
as most of the SDP rest nowadays does by the

86
03:49.800 --> 03:50.563
Authorization HTTP header.

87
03:51.980 --> 03:52.890
The standardization of

88
03:52.890 --> 03:56.440
this protocol is being done at the IETF.

slide-13
03:56.440 --> 03:58.650
And there are already some platforms that are implemented

90
03:58.650 --> 04:02.340
like Millicast or media server like Janus

91
04:02.340 --> 04:06.240
that support it, and we have some client

92
04:06.240 --> 04:07.760
implementation based on your GStreamer

93
04:07.760 --> 04:09.480
and of course in JavaScript.

94-p
04:09.480 --> 04:12.210
The goal is to gain traction so we can get the hardware encoders

95
04:12.210 --> 04:15.100
to implement it and be able to use it in the same tools

96
04:15.100 --> 04:19.440
that are available for RTMP.

slide-14
04:19.440 --> 04:21.847
But this is all that is needed for using WebRTC in a

98
04:21.847 --> 04:25.330
professional media flow? Unfortunately not.

99
04:25.330 --> 04:28.280
And it is not mainly due to the lack of specifications,

100
04:29.460 --> 04:31.770
but mostly because the implementation of many of the

101
04:31.770 --> 04:35.120
features required is lagging behind in most of the browsers,

102
04:35.120 --> 04:36.577
and even with (?) API

103
04:36.577 --> 04:41.280
available to enable them, most of the time, they are in experimental status or hidden

104
04:41.280 --> 04:45.510
behind flags, undocumented or difficult to discover.

105-p
04:45.510 --> 04:46.890
For example, some of

106
04:46.890 --> 04:49.960
the issues that we have found with audio

107
04:52.610 --> 04:52.894
if that WebRTC...

108
04:54.750 --> 04:58.680
we can support multichannel audio with Multiopus.

109
04:59.820 --> 05:01.390
Multiopus is not official standard

110
05:01.390 --> 05:03.300
and it's only supported by Chrome.

111
05:03.300 --> 05:04.260
And it is hidden,

112
05:04.260 --> 05:09.260
that requests SDP mangling in order to support it.

113-p
05:10.640 --> 05:15.300
NetEQ, that is a jitter buffer implementation in all WebRTC browser

114
05:15.300 --> 05:16.750
has issues with music. And for example,

115
05:16.750 --> 05:19.370
Lorenzo has made a great presentation on the topic,

116
05:19.370 --> 05:20.203
referencing

117
05:20.203 --> 05:24.380
all the issues that he has found when trying to use WebRTC

118
05:24.380 --> 05:28.560
for music. So I will encourage everyone to watch it.

119-p
05:28.560 --> 05:31.370
Or for example, the integration between WebRTC and Web Audio

120
05:31.370 --> 05:35.640
has implementation issues on chrome that either adds echo,

121
05:35.640 --> 05:38.240
when you play audio with audio captured by WebRTC

122
05:40.537 --> 05:43.163
and it has been acknowledged by Google itself.

123-p
05:44.700 --> 05:45.590
Or for example,

124
05:45.590 --> 05:48.660
there is a lack of integration between

125
05:48.660 --> 05:50.410
WebRTC and WebVTT

126
05:50.410 --> 05:54.120
making live subtitles impossible.

slide-15
05:54.120 --> 05:56.340
Also on the video side.

128
05:56.340 --> 05:58.267
For example, SVC extension APIs

129
05:58.267 --> 06:01.100
only working in Chrome and it's an 

130
06:01.100 --> 06:01.843
experimental feature,

131
06:01.843 --> 06:02.676
although this is likely

132
06:02.676 --> 06:05.140
going to change in the following weeks.

133-p
06:05.140 --> 06:07.900
AV1 is only supported by Chrome and not enabled in it.

134
06:07.900 --> 06:08.970
Even if they share almost the same codebase.

135
06:08.970 --> 06:11.980
The almost the same code base beeping enter file,

136-p
06:11.980 --> 06:14.970
VP9 profile which supports 10 bits is only supported by Chrome

137
06:14.970 --> 06:15.990
and only on

138
06:15.990 --> 06:17.370
the receiving side.

139
06:17.370 --> 06:19.713
And it is experimental in Safari.

140-p
06:22.988 --> 06:23.821
The playoutdelayhint is an optional extension

141
06:23.821 --> 06:25.317
and it is only supported in chrome.

142-p
06:26.960 --> 06:27.793
Eh,

143
06:27.793 --> 06:30.410
also another sample is that abs-capture-time that

144
06:30.410 --> 06:34.370
is a header extension that could be used for synchronizing a

145
06:34.370 --> 06:37.580
video with standard metadata is only supporting in Chrome

146
06:37.580 --> 06:39.240
but it is a thing hidden

147
06:39.240 --> 06:42.180
and requires SDP mangling to enable it.

148-p
06:42.180 --> 06:45.850
And at last, as an example of how professional-grade features

150
06:46.683 --> 06:50.597
are not always sought to be used with the WebRTC,

151
06:50.597 --> 06:54.960
video alpha is not supported, never meant to be supported in WebRTC

152
06:54.960 --> 06:57.940
but it is under consideration for being implemented

153
06:57.940 --> 06:59.520
in WebCodecs.

slide-16
06:59.520 --> 07:02.400
So as a conclusion, WebRTC today is (?).

155
07:02.400 --> 07:03.770
And I will say, even, it is

156
07:03.770 --> 07:06.420
the best option for delivering professional broadcast

157
07:06.420 --> 07:09.330
quality media with minimal latency,

158
07:09.330 --> 07:11.690
but there is a still a lot of work to do in order to be able

159
07:11.690 --> 07:13.280
to WHIP WebRTC into shape.

slide-17
07:13.280 --> 07:15.323
But the good news is that we are on it.

