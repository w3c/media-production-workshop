WEBVTT

1
00:08.118 --> 00:10.657
<v ->Hello, and welcome to my talk.</v>

2
00:10.657 --> 00:13.130
In this presentation I'm going to talk about

3
00:14.460 --> 00:18.200
how Clipchamp has adopted WebCodecs

4
00:18.200 --> 00:21.510
in the past 12 months, round about.

5
00:21.510 --> 00:24.940
Clipchamp is an in browser video editor.

slide-3
00:24.940 --> 00:26.860
At Clipchamp our mission is to empower anyone,

7
00:26.860 --> 00:28.650
to tell stories worth sharing.

slide-4
00:28.650 --> 00:33.390
And what that looks like is we have built a fully

9
00:33.390 --> 00:35.263
in-browser video editor.

slide-5
00:36.720 --> 00:41.420
And we firmly believed from the early days of when we

11
00:41.420 --> 00:45.720
founded the company that only in-browser platforms offer

12
00:45.720 --> 00:48.230
the convenience of such a cloud service

13
00:48.230 --> 00:51.270
combined with the speed of a desktop application,

14
00:51.270 --> 00:54.190
and we've used that in-browser paradigm.

slide-6
00:54.190 --> 00:57.500
For one, probably the most important reason is that

16
00:57.500 --> 00:59.330
caters for a great user experience.

17
00:59.330 --> 01:03.790
And the reason for that is video files are large.

18-p
01:03.790 --> 01:06.350
It also comes with the fantastic advantage from a

19
01:06.350 --> 01:09.860
commercial perspective that it has near zero runtime cost.

20
01:09.860 --> 01:12.700
The hardware has already been paid for.

21-p
01:12.700 --> 01:16.640
And finally, there's also the aspect of privacy,

22
01:16.640 --> 01:19.650
obviously very important in this day and age

23
01:19.650 --> 01:22.860
where everything you do not upload to a cloud service,

24
01:22.860 --> 01:25.900
but that stays on your devices is obviously

25
01:25.900 --> 01:28.530
kind of subject to perfect privacy.

slide-7
01:28.530 --> 01:31.660
The browser remains a challenging platform, as you all know,

27
01:31.660 --> 01:33.710
especially when you do heavy lifting like

28
01:33.710 --> 01:35.470
video encoding or decoding.

29-p
01:35.470 --> 01:39.240
And that is obviously first and foremost resource allocation.

30
01:39.240 --> 01:42.340
Memory is scarce still. Performance is

31
01:42.340 --> 01:45.590
equally important. Video encoding is expensive

32
01:45.590 --> 01:49.470
if you use software encoding paradigm, as we,

33
01:49.470 --> 01:53.310
for the longest time have done. Access to low-level hardware

34
01:53.310 --> 01:55.350
capabilities, again, is limited.

35
01:55.350 --> 01:59.440
Yes, these days you do have WebAssembly SIMD and we've

36
01:59.440 --> 02:01.170
made good use of that. You do have WebGL for a long time.

37
02:01.170 --> 02:05.140
WebGPU has just launched and thankfully,

38
02:05.140 --> 02:07.820
and obviously that's where WebCodecs fit in.

39-p
02:07.820 --> 02:12.590
We now also have access to the circuitry that's devoted to

40
02:12.590 --> 02:16.180
hardware accelerated video and audio decoding and encoding.

41
02:16.180 --> 02:17.990
And that's fantastic for us.

42-p
02:17.990 --> 02:19.660
The two aspects that I encircled

43
02:19.660 --> 02:22.700
in purple here, performance and access to

44
02:22.700 --> 02:23.940
low level hardware capabilities,

45
02:23.940 --> 02:28.940
are obviously the challenges that WebCodecs addresses

slide-8
02:29.558 --> 02:32.820
Talking about a lot of video processing pipelines

47
02:32.820 --> 02:36.680
specifically about probably the most challenging part

48
02:36.680 --> 02:40.800
which is when you're exporting a video project that you've

49
02:41.864 --> 02:44.230
been editing, where you put together various pieces of footage.

50
02:44.230 --> 02:46.810
So that project which combines all of that,

51
02:46.810 --> 02:49.710
or can combine all of that, turn that into an MP4 file,

52
02:49.710 --> 02:53.600
which you can then distribute around the web.

slide-8
02:53.600 --> 02:54.390
That is quite an involved process. And again,

54
02:54.390 --> 02:56.140
we run it all in the browser and currently

55
02:56.140 --> 02:58.980
it's subdivided into three stages.

56-p
02:58.980 --> 03:03.980
Here we have the decoder which takes care of extracting

57
03:04.300 --> 03:05.550
a stream of, you know,

58
03:05.550 --> 03:08.810
kind of raw frames from your source footage

59
03:08.810 --> 03:11.330
and then passed into the middle stage,

60
03:11.330 --> 03:14.400
which we call the compositor that is where,

61
03:14.400 --> 03:19.150
all of those pieces of footage are combined,

62
03:19.150 --> 03:22.600
effects are layered on top. And that one again,

63
03:22.600 --> 03:26.220
produces a composed stream of raw frames,

64
03:26.220 --> 03:28.613
which is then passed into the encoder,

65
03:29.547 --> 03:32.180
which turns it into an MP4 file.

66-p
03:32.180 --> 03:36.213
We basically retrofitted WebCodecs into this architecture.

slide-9
03:37.700 --> 03:40.540
And the way we did that is we combined that

68
03:40.540 --> 03:42.590
WebAssembly build of FFmpeg that

69
03:42.590 --> 03:46.248
I was just showing you with the WebCodecs API

70
03:46.248 --> 03:51.248
and the way to do that is we created codec stubs, inside FFmpeg,

71
03:51.418 --> 03:55.210
and what those codec stubs then do is they call out from

72
03:55.210 --> 03:59.270
that WebAssembly build into JavaScript land.

73-p
03:59.270 --> 04:01.970
And that is basically to go through the WebCodecs API

74
04:03.120 --> 04:05.870
lifecycle, or it's lot better to say the VideoEncoder API

75
04:05.870 --> 04:08.150
inside of the WebCodecs specification.

76
04:08.150 --> 04:11.300
Initially, you initialize and configure your VideoEncoder

77
04:11.300 --> 04:12.133
instance, obviously.

78-p
04:12.133 --> 04:17.300
And then you go through the process of pushing in the raw

79
04:17.300 --> 04:20.746
frames and then pulling out the encoded chunks,

80
04:20.746 --> 04:23.450
which are then put back to FFmpeg,

81
04:23.450 --> 04:25.690
which then puts them into the container format.

82
04:25.690 --> 04:28.310
And lastly, you close down and de-initialize

83
04:28.310 --> 04:29.843
your VideoEncoder instance.

slide-10
04:33.990 --> 04:36.630
Now that has worked really well for us,

85
04:36.630 --> 04:38.330
but it didn't come without some gotchas.

86
04:38.330 --> 04:41.300
And that's maybe the most interesting part of this talk.

87-p
04:41.300 --> 04:43.120
And maybe then also,

88
04:43.120 --> 04:45.910
stimulate some discussions around what can be done

89
04:45.910 --> 04:49.160
about that for others who have had the same challenges.

90-p
04:49.160 --> 04:51.910
What we had to do is create an artificial,

91
04:51.910 --> 04:55.940
pre-flight dry run of the video encoder using the same

92
04:55.940 --> 04:58.578
parameters, same resolution, same everything,

93
04:58.578 --> 05:01.183
just to generate that piece of extra data.

94-p
05:02.700 --> 05:02.970
And I think in WebCodecs API

95
05:02.970 --> 05:07.260
parliance, it's called a description.

96
05:07.260 --> 05:09.850
And it's basically for, if you know about H.264,

97
05:09.850 --> 05:14.343
they have these binary units in there,

98
05:15.320 --> 05:18.280
which are basically metadata, SPS/PPS, and that has to

99
05:18.280 --> 05:23.280
be placed or has to be put back to FFmpeg,

100
05:23.350 --> 05:25.650
such that it can be put in the container format at the

101
05:25.650 --> 05:27.860
right place. Now I leave it at that.

102
05:27.860 --> 05:30.600
But that has given us a bit of a bit of headache to,

103
05:30.600 --> 05:32.169
to get this right.

104-p
05:32.169 --> 05:35.970
One concern, which has less to do with WebCodecs,

105
05:35.970 --> 05:38.810
but more with the fact that FFmpeg as such

106
05:38.810 --> 05:41.410
is obviously normally used as a command line tool,

107
05:41.410 --> 05:44.340
And that means it's typically a synchronous call stack and

108
05:44.340 --> 05:47.540
that's inherently not a good fit for WebCodecs,

109
05:47.540 --> 05:49.920
which is, like any browser,

110
05:49.920 --> 05:52.200
almost any browser API asynchronous.

111
05:52.200 --> 05:55.200
You have to break up the synchronous call stack for FFmpeg

112
05:55.200 --> 05:58.110
into multiple asynchronous calls.

slide-11
05:58.110 --> 06:00.725
And lastly, we have a bit of a wishlist.

114
06:00.725 --> 06:05.725
Obviously WebCodecs 1.0 or the current version of WebCodecs,

115
06:05.910 --> 06:06.750
I should say, it's great.

116
06:06.750 --> 06:10.480
A big thank you goes out to all the people that have pushed

117
06:10.480 --> 06:13.180
for this standard, who have implemented it in browsers.

118-p
06:14.480 --> 06:17.448
I can only imagine that it might've been a hard sell because like,

119
06:17.448 --> 06:20.703
you know, it's a very specialized capability.

120
06:20.703 --> 06:24.130
Nevertheless, it's, you know,

121
06:24.130 --> 06:26.543
kind of fantastic that this has happened.

122-p
06:27.510 --> 06:29.290
That being said, if you're hoping that

123
06:29.290 --> 06:32.870
it doesn't remain this way, but that further

124
06:32.870 --> 06:34.660
iterations on that standard.

125
06:34.660 --> 06:37.690
And there are a few things we are hoping for that would make

126
06:37.690 --> 06:40.160
our lives a little bit easier.

127-p
06:40.160 --> 06:42.390
One thing we were struggling with, and where we again

128
06:42.390 --> 06:46.870
have only a crutch in place, there's not an active

129
06:46.870 --> 06:50.685
back pressure on the VideoEncoder object where

130
06:50.685 --> 06:54.930
the VideoEncoder object actively tells you

131
06:54.930 --> 06:59.320
to throttle the way you pass raw video frames,

132
06:59.320 --> 07:02.860
and basically my buffers are all full.

133
07:02.860 --> 07:05.380
So it'd be good to see some sort of event coming out of

134
07:05.380 --> 07:08.400
video encoder object that actively tells people

135
07:08.400 --> 07:09.973
"stop until I tell you otherwise".

136-p
07:12.430 --> 07:14.500
Another concern is right now,

137
07:14.500 --> 07:17.120
the way to configure video encoders

139
07:17.120 --> 07:19.280
is largely through the bitrate.

140
07:19.280 --> 07:22.490
And that's okay for many typical workloads,

141
07:22.490 --> 07:24.490
think about streaming scenarios and so forth,

142
07:24.490 --> 07:26.490
but in our case for a video editor,

143
07:26.490 --> 07:29.350
you are probably a bit more focused on,

144
07:29.350 --> 07:32.320
you are probably a bit more obsessed about quality,

145
07:32.320 --> 07:34.100
visual quality that is.

146
07:34.100 --> 07:38.120
It would be good to have some sort of semantic

147
07:38.120 --> 07:38.953
quality tuning knob,

148
07:38.953 --> 07:43.500
which is more like an abstract parameter which just says,

149
07:43.500 --> 07:49.300
from zero to one, one means perfect quality, zero means crap quality

151
07:49.300 --> 07:50.940
and anything in between,

152
07:50.940 --> 07:54.350
but that gives you like a bit of a more objective means

153
07:54.350 --> 07:56.723
to control the quality other than the bitrate.

154-p
07:59.523 --> 08:01.380
Obviously HDR matters more and more,

155
08:01.380 --> 08:04.477
as more displays are being in use, on phones its already commonplace,

156
08:04.477 --> 08:09.477
TV is pretty much the same,

157
08:09.570 --> 08:11.980
PC monitors maybe not quite as much yet,

158
08:11.980 --> 08:14.000
but it would be good to see that being supported

159
08:14.000 --> 08:16.440
by WebCodecs as well.

160-p
08:16.440 --> 08:17.700
HEVC decoding,

161
08:17.700 --> 08:21.670
and I know there's an entire discussion around IP and patent

162
08:22.740 --> 08:25.880
liability and so forth, but pretty much if WebCodecs

163
08:25.880 --> 08:29.170
could tap into any codec that is installed on the device,

164
08:29.170 --> 08:31.770
even if it's selective, like if on some devices,

165
08:31.770 --> 08:34.280
HEVC is not supported, fine,

166
08:34.280 --> 08:37.390
and we have to offer a fallback in some sort of software

167
08:37.390 --> 08:39.106
service side encoding,

168
08:39.106 --> 08:40.870
but it would be good if at least the codecs that are

169
08:40.870 --> 08:43.460
installed would be kind of funneled through and exposed

170
08:43.460 --> 08:44.813
through WebCodecs.

171-p
08:45.717 --> 08:49.350
And unfortunately there's certain well-known companies that

172
08:49.350 --> 08:53.700
push for HEVC despite the difficult IP situation.

173
08:53.700 --> 08:55.700
So that's something that's an audience we want to cater for.

175-p
08:57.400 --> 08:59.620
And I mentioned that synchronous flavor of the WebCodecs

176
08:59.620 --> 09:03.640
API inside workers would be useful as well.

177-p
09:03.640 --> 09:07.680
I didn't include the demuxing and muxing part. I mean,

178
09:07.680 --> 09:10.720
we support these through FFmpeg. And I wouldn't claim

179
09:10.720 --> 09:13.133
this goes with our challenges probably for new adopters of

180
09:13.133 --> 09:16.870
the WebCodecs API is one of the greatest concerns.

181-p
09:16.870 --> 09:21.550
In general, WebCodecs as such doesn't offer anything

182
09:21.550 --> 09:26.550
by way of kind of parsing a video file.

183
09:26.960 --> 09:31.843
So the demuxing part, or producing an MP4 file.

185-p
09:35.129 --> 09:37.623
I don't know what the solution to that might be.

186
09:37.623 --> 09:40.640
There's obviously a lot of complexity in this part.

187
09:40.640 --> 09:43.841
And FFmpeg already does all of that.

188
09:43.841 --> 09:45.540
So that's why I didn't include it.

189
09:45.540 --> 09:48.390
I'm not sure if it's a good idea to include this into

190
09:48.390 --> 09:51.796
WebCodecs, because this is a bit of a different concern,

191
09:51.796 --> 09:54.753
even though pretty much anyone using WebCodecs would

192
09:54.753 --> 09:57.153
probably have to deal with it one way or another.

slide-12
09:59.400 --> 10:01.800
And that concludes my talk.

194
10:01.800 --> 10:03.413
Thank you. And I'm free for questions.
