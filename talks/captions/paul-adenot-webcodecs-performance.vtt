WEBVTT

1
00:07.750 --> 00:08.583
<v ->Hi,</v>

2
00:08.583 --> 00:09.900
my name is Paul Adenot.

3
00:09.900 --> 00:12.360
I work at Mozilla on anything related to audio and video in

4
00:12.360 --> 00:13.780
Firefox.

5-p
00:13.780 --> 00:14.720
Today,

6
00:14.720 --> 00:18.300
I'd like to talk about a recent API called the WebCodecs API.

7
00:18.300 --> 00:20.240
And in particular about memory access patterns

8
00:20.240 --> 00:23.170
when using this API in conjunction with other APIs on

9
00:23.170 --> 00:24.620
the web platform.

10
00:24.620 --> 00:26.730
We'll talk about some raw performance numbers

11
00:26.730 --> 00:28.590
when accessing video frames,

12
00:28.590 --> 00:30.600
what WebCodecs does today to minimize memory,

13
00:30.600 --> 00:31.810
access overhead

14
00:31.810 --> 00:34.440
and some problems that the API has today,

15
00:34.440 --> 00:37.410
where a solution exists, but hasn't been implemented.

16
00:37.410 --> 00:40.910
And more importantly about a couple of harder problems that

17
00:40.910 --> 00:42.180
we'll tackle in the future,

18
00:42.180 --> 00:44.650
so that using WebCodecs will have the same performance

19
00:44.650 --> 00:46.113
profile as a native app.

20-p
00:47.850 --> 00:49.150
Before starting,

21
00:49.150 --> 00:50.930
I'd like to say that any simple scenario,

22
00:50.930 --> 00:53.500
such as decoding and rendering video and audio

23
00:53.500 --> 00:55.150
are fairly optimized today,

24
00:55.150 --> 00:57.210
and we'll be talking about advanced use cases,

25
00:57.210 --> 00:58.400
such as big native apps

26
00:58.400 --> 01:01.833
compiled to WebAssembly that want to leverage WebCodecs

27
01:01.833 --> 01:05.190
to speed up their encoding and decoding operations

28
01:05.190 --> 01:06.220
or other programs

29
01:06.220 --> 01:08.810
that are making a rather intensive use WebCodecs

30
01:08.810 --> 01:11.193
and want to minimize any inefficiencies.

slide-2
01:12.770 --> 01:13.603
But first

32
01:13.603 --> 01:14.890
let me repeat an old quote

33
01:14.890 --> 01:17.310
often heard in the free software multimedia development

34
01:17.310 --> 01:18.430
circles:

35
01:18.430 --> 01:22.600
"memcpy is murder". Behind this tongue-in-cheek sentence

36
01:22.600 --> 01:25.360
lies in important fact: to maximize performance,

37
01:25.360 --> 01:28.170
the minimum of memory copies need to happen.

38
01:28.170 --> 01:31.240
And the working set of nap needs to be as small as possible

39
01:31.240 --> 01:33.933
to ideally git into CPU caches.

40
01:35.270 --> 01:37.300
Fetching memory into caches is slow,

41
01:37.300 --> 01:38.390
caches are small,

42
01:38.390 --> 01:40.400
so no duplications should happen.

slide-3
01:41.220 --> 01:44.540
But first let's consider the size of the problem.

44-p
01:44.540 --> 01:49.150
A video frame in YUV420, full HD, standard dynamic range

45
01:49.150 --> 01:50.613
is around 4MB.

46
01:51.450 --> 01:54.170
A video frame in YUV420, 4K,

47
01:54.170 --> 01:55.630
standard dynamic range

48
01:55.630 --> 01:57.530
is around 16MB.

49
01:57.930 --> 02:01.600
A video frame in P010, full HD, high dynamic range,

50
02:01.600 --> 02:05.253
(either 10 or 12 bits) is around 32MB.

slide-4
02:06.570 --> 02:08.360
Here are some performance numbers that I've gathered,

52
02:08.360 --> 02:10.800
writing a small C++ program on my extremely high-end

53
02:10.800 --> 02:12.650
Linux workstation,

54
02:12.650 --> 02:14.600
of copying a single frame of this size.

55
02:16.300 --> 02:18.800
A video frame in YUV420, full HD,

56
02:18.800 --> 02:20.980
standard dynamic range, takes about 1.5ms to

57
02:20.980 --> 02:22.890
copy when the cache is hot,

58
02:22.890 --> 02:25.600
which means the source is already in the cache.

59
02:25.600 --> 02:28.710
And 4.5ms if not. The source needs to be fetched from memory.

60
02:28.710 --> 02:31.600
Two frames easily fit in the cache of this CPU.

61-p
02:32.710 --> 02:33.543
A video frame

62
02:33.543 --> 02:36.790
in YUV 420, 4K, standard dynamic range,

63
02:36.790 --> 02:41.790
takes 6.6ms and 17ms when in CPU cache.

64
02:42.880 --> 02:44.540
This only works because the CPU I'm running on

65
02:44.540 --> 02:48.233
has lots of cache, and a single frame still fits.

66-p
02:49.900 --> 02:53.550
A video frame in P010, full HD, high dynamic range

67
02:53.550 --> 02:55.430
either 10 or 12 bits, takes 15ms

68
02:55.430 --> 02:58.320
if the caches are hot and 33ms if not.

69
02:58.320 --> 03:01.910
The CPU I'm running this on has 20MB of L3 cache.

70
03:01.910 --> 03:03.730
So only a partial frame fits.

71-p
03:04.750 --> 03:05.630
Considering the budget

72
03:05.630 --> 03:10.421
for a single frame at 30Hz is 33ms and

73
03:10.421 --> 03:11.960
16.6ms at 60Hz,

74
03:11.960 --> 03:15.190
we can quickly see that the numbers here are uncomfortable,

75
03:15.190 --> 03:19.100
and minimizing memory copies are going to be of importance.

76
03:19.100 --> 03:21.240
I'll repeat that standard scenarios in WebCodecs such as

77
03:21.240 --> 03:23.000
playback don't make copies.

78
03:23.000 --> 03:24.630
I'm talking about advanced use cases here,

79
03:24.630 --> 03:25.743
such as processing.

slide-5
03:27.150 --> 03:28.220
Additionally,

81
03:28.220 --> 03:30.840
GPU to CPU copies (read back)

82
03:30.840 --> 03:33.870
and CPU to GPU copies (texture uploads)

83
03:33.870 --> 03:35.700
are also quite expensive.

84
03:35.700 --> 03:38.210
It's best to carefully consider when and how they need to be

85
03:38.210 --> 03:39.430
done,

86
03:39.430 --> 03:40.630
and to try to minimize transfers,

87
03:40.630 --> 03:44.100
if possible. WebCodecs has been carefully designed to allow

88
03:44.100 --> 03:47.740
to easily leave VideoFrames on the GPU and makes all copies

89
03:47.740 --> 03:48.593
explicit.

slide-6
03:49.990 --> 03:53.250
But sometimes it's really necessary to perform copies.

91
03:53.250 --> 03:55.140
Here are three scenarios

92
03:55.140 --> 03:56.440
when this is unavoidable.

93-p
03:57.310 --> 03:58.980
Custom processing of video frames that

94
03:58.980 --> 04:01.680
are on the GPU using regular JavaScript or WASM code

95
04:01.680 --> 04:04.190
in which case we need to read back.

96-p
04:04.190 --> 04:06.887
Custom processing of video frames that are on the CPU,

97
04:06.887 --> 04:08.600
via WASM,

98
04:08.600 --> 04:11.900
then the data needs to be copied into the WASM heap,

99
04:11.900 --> 04:13.970
or working with other web API that requires copies.

100-p
04:13.970 --> 04:14.803
For example,

101
04:14.803 --> 04:17.480
playing audio data with an AudioWorklet will require

102
04:17.480 --> 04:19.680
copying into the AudioWorklet output buffer.

slide-7
04:21.320 --> 04:22.360
As said,

104
04:22.360 --> 04:23.530
WebCodecs has been designed with

105
04:23.530 --> 04:24.970
copy minimization in mind.

106
04:24.970 --> 04:27.560
The memory is not visible directly to script,

107
04:27.560 --> 04:29.850
and authors need to call a function called "copyTo"

108
04:29.850 --> 04:33.150
to get an ArrayBuffer that can be directly manipulated.

109
04:33.150 --> 04:35.810
This "copyTo" method can also take care of conversion in

110
04:35.810 --> 04:37.500
certain cases.

111
04:37.500 --> 04:40.490
when calling clone on a VideoFrame or AudioData object,

112
04:40.490 --> 04:44.260
the underlying resources are referenced for a second

113
04:44.260 --> 04:45.930
time,

114
04:45.930 --> 04:46.220
instead of copied,

115
04:46.220 --> 04:48.450
so a single frame can be used in different context

116
04:48.450 --> 04:49.900
efficiently.

117
04:49.900 --> 04:51.803
Doing a deep copy is still possible.

118-p
04:53.570 --> 04:54.403
Now,

119
04:54.403 --> 04:57.140
let's see a number of copies that exist today in WebCodecs

120-p
04:57.140 --> 04:57.973
First,

121
04:57.973 --> 05:01.103
the compressed input of a decoder is currently copied.

122
05:01.990 --> 05:03.537
This is not that problematic because the input is a lot

123
05:03.537 --> 05:05.380
smaller than the output.

124
05:05.380 --> 05:06.977
It could be optimized.

125-p
05:06.977 --> 05:08.260
More importantly,

126
05:08.260 --> 05:10.510
there is currently no way to become the owner of the memory

127
05:10.510 --> 05:12.560
behind a VideoFrame or an AudioData,

128
05:12.560 --> 05:13.730
when it's regular memory,

129
05:13.730 --> 05:14.683
non GPU.

130-p
05:16.600 --> 05:17.310
Finally,

131
05:17.310 --> 05:18.470
the API

132
05:18.470 --> 05:21.220
for now does a lot of allocations and deallocation,

133
05:21.220 --> 05:23.123
thrashing CPU caches unnecessarily.

slide-8
05:24.210 --> 05:26.670
Here are two simple design proposals to fix the two last

135
05:26.670 --> 05:28.200
points in this list.

slide-9
05:28.200 --> 05:29.460
First,

137
05:29.460 --> 05:32.200
a method called "detach" could return an ArrayBuffer and

138
05:32.200 --> 05:34.500
close the video frame in one call,

139
05:34.500 --> 05:36.310
skipping a copy when possible,

140
05:36.310 --> 05:38.300
for example, when it hasn't been cloned,

141
05:38.300 --> 05:40.240
that's fairly common.

142
05:40.240 --> 05:42.540
Similarly, we can add this method on AudioData.

slide-10
05:44.700 --> 05:45.300
Next,

144
05:45.300 --> 05:48.800
we can limit the native allocation and deallocation pressure by

145
05:48.800 --> 05:50.800
taking a buffer in the decode method, in which the decoded

146
05:50.800 --> 05:52.650
data is going to be written to,

147
05:52.650 --> 05:55.500
and getting back the input buffer to reuse,

148
05:55.500 --> 05:57.600
in the output callback.

149
05:57.600 --> 05:59.910
This will matter a lot for audio where it's a lot easier for

150
05:59.910 --> 06:01.300
buffer to fit in CPU caches,

151
06:01.300 --> 06:05.193
but their numbers are a lot bigger.

slide-11
06:07.490 --> 06:08.700
Now let's talk,

153
06:08.700 --> 06:11.380
about some of the harder problems faced on the

154
06:11.380 --> 06:13.120
web platform today.

155-p
06:13.120 --> 06:14.120
First,

156
06:14.120 --> 06:16.690
the necessity to copy from into the WASM heap becomes

157
06:16.690 --> 06:18.800
problematic when the data to copy is big enough,

158
06:18.800 --> 06:22.290
such as video frames. Decoding into the WASM heap would be

159
06:22.290 --> 06:24.823
a welcomed feature, but this needs some work.

160-p
06:25.660 --> 06:28.910
Then there is a problem of passing views over SharedArrayBuffer

161
06:28.910 --> 06:30.440
to APIs.

162
06:30.440 --> 06:33.660
SharedArrayBuffer is often a good solution to limit copies,

163
06:33.660 --> 06:37.140
but it's often unclear what those API do to memory

164
06:37.140 --> 06:40.680
and if they work with concurrent writes to the memory region

165
06:40.680 --> 06:42.130
that has been passed to them.

166
06:43.270 --> 06:45.510
Having read-only memory ranges on SharedArrayBuffer,

167
06:45.510 --> 06:46.970
could be a solution here,

168
06:46.970 --> 06:48.320
but it's a complex problem.

169-p
06:49.600 --> 06:52.150
An effort has been started to try to document the problems

170
06:52.150 --> 06:54.397
about copies on the platform at the WICG,

171
06:54.397 --> 06:57.270
and I encourage interested parties to voice their

172
06:57.270 --> 07:01.000
opinions and contribute their experience to the discussion,

173
07:01.000 --> 07:04.470
reports from the field are always welcomed and very

174
07:04.470 --> 07:07.220
important to inform future developments.

slide-12
07:07.220 --> 07:08.440
In conclusion,

176
07:08.440 --> 07:11.900
while WebCodecs can and will be improved when it comes

177
07:11.900 --> 07:12.300
to memory access,

178
07:12.300 --> 07:15.300
it's already extremely powerful and common use cases

179
07:15.300 --> 07:16.650
are already quite fast.

180
07:16.650 --> 07:17.600
Making it perfect

181
07:17.600 --> 07:20.000
is definitely possible and will probably happen in the

182
07:20.000 --> 07:21.340
future.

183
07:21.340 --> 07:22.173
Thanks.
