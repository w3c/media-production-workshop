WEBVTT

1
00:07.260 --> 00:08.830
<v ->Hi, I'm Chris Cunningham.</v>

2
00:08.830 --> 00:11.270
If you missed my earlier WebCodecs primer talk,

3
00:11.270 --> 00:13.750
I encourage you to check that one out first.

4-p
00:13.750 --> 00:15.600
In this talk, I'm going to focus

5
00:15.600 --> 00:17.893
on WebCodecs encoding configuration.

6
00:18.800 --> 00:21.990
The idea is to surface what we have

7
00:21.990 --> 00:23.190
and the reasoning behind it,

8
00:23.190 --> 00:26.730
and have you tell us what to prioritize next.

9
00:26.730 --> 00:28.870
If you look at our configuration structure

10
00:28.870 --> 00:32.470
and compare that to FFmpeg or libvpx,

11
00:32.470 --> 00:35.200
it will immediately be clear that we have

12
00:35.200 --> 00:36.960
lots of knobs we could consider adding.

13-p
00:36.960 --> 00:39.100
Having said that, there are lots of folks who

14
00:39.100 --> 00:41.820
are using WebCodecs and encoding

15
00:41.820 --> 00:44.440
in media production settings and apps.

16
00:44.440 --> 00:46.713
Don't let this talk scare you off.

slide-2
00:48.350 --> 00:49.580
Before I get into the structure,

18
00:49.580 --> 00:51.660
I wanna mention the underlying design principle,

19
00:51.660 --> 00:54.510
which is "don't constrain features

20
00:54.510 --> 00:57.300
or quality unless the user asks for it".

21-p
00:57.300 --> 00:58.860
For encoding defaults,

22
00:58.860 --> 01:01.890
this might mean we don't constrain quality

23
01:01.890 --> 01:03.930
for the sake of latency.

24
01:04.000 --> 01:06.900
We don't constrain bit rate unless requested.

25
01:06.900 --> 01:08.953
It's VBR by default.

26
01:10.160 --> 01:13.400
We allow B-frames wherever the profile

27
01:13.400 --> 01:15.593
that is configured would allow B-frames.

slide-3
01:16.880 --> 01:18.113
Another thing to mention.

29
01:19.370 --> 01:22.700
When you start encoding, the output callback will

30
01:22.700 --> 01:24.500
also admit a metadata dictionary

31
01:24.500 --> 01:26.290
that contains the video decoding config.

32
01:26.290 --> 01:27.580
This is obviously very important

33
01:27.580 --> 01:30.960
if you want to eventually decode the content you encoded.

34-p
01:30.960 --> 01:33.500
And then it admits that same config

35
01:33.500 --> 01:35.970
anytime the configuration changes,

36
01:35.970 --> 01:38.610
such that, now you need a slightly different configuration

37
01:38.610 --> 01:41.500
to decode what is now being output.

38-p
01:41.500 --> 01:43.380
I mention this because it's useful

39
01:43.380 --> 01:46.410
to describe some of the encoder configuration parameters

40
01:46.410 --> 01:47.700
we're about to get into, in terms of

41
01:47.700 --> 01:50.833
their effect on the admitted decoder config.

slide-4
01:52.950 --> 01:55.850
All right, so here we have just a screenshot

43
01:55.850 --> 01:56.770
from the spec.

44
01:56.770 --> 01:58.970
This is the video encoder config dictionary.

45
02:00.309 --> 02:01.750
At the top, we've got the required parameters.

46
02:01.750 --> 02:04.273
We have codec, which is a codec string,

47
02:05.120 --> 02:08.100
very similar to what you would see in MSE

48
02:08.100 --> 02:10.200
or media capabilities.

49
02:10.200 --> 02:13.200
This is like for H.264, 

50
02:13.200 --> 02:17.330
It's av1 dot profile byte, level byte.

51
02:17.330 --> 02:22.300
For VP9, it's VP09 dot profile dot so-on.

52
02:22.300 --> 02:24.720
AV1, AV01.

53
02:24.720 --> 02:28.300
For all codecs that are usable WebCodecs,

54
02:28.300 --> 02:31.920
you can go to the WebCodecs specification "Codec Registry",

55
02:31.920 --> 02:34.700
and there you can look up the specific codec strings

56
02:34.700 --> 02:36.163
to use for a given codec.

57-p
02:37.370 --> 02:39.833
All right, so next we have width and height,

58
02:40.800 --> 02:43.570
and this is the number of pixels to encode.

59
02:43.570 --> 02:46.100
For video frames, this corresponds

60
02:46.100 --> 02:48.570
to visible width and visible height.

61
02:48.570 --> 02:52.370
For decoder config, this corresponds to display.

62
02:52.370 --> 02:53.900
No.

63
02:53.900 --> 02:56.823
It's again visible with and visible height.

64
02:58.220 --> 03:00.900
If you give us a video frame with a visible width

65
03:00.900 --> 03:02.730
and height that don't match these dimensions,

66
03:02.730 --> 03:06.500
we will actually scale the frame before we encode,

67
03:06.500 --> 03:07.640
and that is originally motivated

68
03:07.640 --> 03:10.260
by RTC use cases, where the camera's open

69
03:10.260 --> 03:11.820
to the high resolution, but then

70
03:11.820 --> 03:14.640
you want the encoder to be able to encode

71
03:14.640 --> 03:18.120
at whatever resolution, because your needs fluctuate

72
03:18.120 --> 03:20.293
with the changes in bit rate and CPU load.

73-p
03:22.700 --> 03:26.900
Okay, so moving on, we are now into optional parameters.

74
03:26.900 --> 03:28.170
There's displayWidth and displayHeight.

75
03:28.170 --> 03:29.670
If not provided, these default

76
03:29.670 --> 03:32.370
to the width and height we just talked about,

77
03:32.370 --> 03:33.310
and generally, that's probably

78
03:33.310 --> 03:34.410
what most people want.

79
03:35.330 --> 03:37.140
Where this is interesting is for things

80
03:37.140 --> 03:40.150
like anamorphic content, where the pixel's

81
03:40.150 --> 03:42.560
actually wider than it is tall

82
03:42.560 --> 03:44.900
when finally rendered.

83
03:44.900 --> 03:48.830
We actually stretch the rendered video just slightly.

84-p
03:49.430 --> 03:50.790
Then we have bit rate.

85
03:50.790 --> 03:54.670
The default is implementer-defined.

86
03:54.670 --> 03:57.100
In Chrome, it's gonna be whatever the underlying codec,

87
03:57.100 --> 03:58.510
like let's say libvpx would use,

88
03:58.510 --> 04:00.350
if you didn't specify a bit rate.

89
04:00.350 --> 04:02.460
That's probably not what you want.

90
04:02.460 --> 04:03.760
If you're using this production,

91
04:03.760 --> 04:06.200
I recommend setting bit rate,

92
04:06.200 --> 04:09.200
in which case I also recommend setting the next knob,

93
04:09.200 --> 04:10.480
which is frame rate.

94
04:10.480 --> 04:12.330
The value here can be rough,

95
04:12.330 --> 04:15.300
like variable frame rate video's common.

96
04:15.300 --> 04:17.970
But the idea is to guide the rate controller.

97
04:17.970 --> 04:20.500
Bit rate is bits per second.

98
04:20.500 --> 04:22.820
And so you need to know how many frames per second

99
04:22.820 --> 04:25.200
to know how many bits to give a given frame.

100-p
04:26.910 --> 04:29.530
On our roadmap, we intend to also use frame timestamps

101
04:29.530 --> 04:30.363
to refine this.

102
04:30.363 --> 04:33.100
The minute that you said 30 fps,

103
04:33.100 --> 04:35.140
but we detected it's actually closer

104
04:35.140 --> 04:37.500
to 25 in this one segment of your video,

105
04:37.500 --> 04:39.520
or it's much higher than that in some other segment,

106
04:39.520 --> 04:42.180
we should adjust rate control accordingly.

107
04:42.180 --> 04:44.680
But even then, it's good to provide

108
04:44.680 --> 04:46.290
some sort of baseline upfront,

109
04:46.290 --> 04:48.700
because we won't have any timestamps

110
04:48.700 --> 04:51.363
until some initial frames come in.

111-p
04:52.950 --> 04:55.720
All right, so I'm gonna go out of order

112
04:55.720 --> 04:57.890
just a second and keep talking about bit rate.

113
04:57.890 --> 04:59.560
Next thing I'm gonna say is bitrateMode.

114
04:59.560 --> 05:01.900
This is second from the bottom.

115
05:01.900 --> 05:03.213
This is variable by default,

116
05:04.440 --> 05:06.890
and then the alternative is, of course, constant.

117-p
05:08.440 --> 05:10.140
We aren't super prescriptive about

118
05:10.140 --> 05:11.950
how constant or how variable, like

119
05:11.950 --> 05:14.330
what is the buffer size that we're talking about here?

120
05:14.330 --> 05:17.200
And that reflects the reality that WebCodecs is built

121
05:17.200 --> 05:18.670
on top of many codec compilations,

122
05:18.670 --> 05:21.923
which, themselves, are not super prescriptive or consistent.

123-p
05:22.860 --> 05:25.400
Having said that, some libraries do offer a

124
05:25.400 --> 05:25.950
lot more knobs here,

125
05:25.950 --> 05:28.860
so options to configure the buffer size,

126
05:28.860 --> 05:31.100
the amount of overshoot or undershoot,

127
05:31.100 --> 05:33.790
and we are open to adding those.

128
05:33.790 --> 05:35.240
Let us know if you need them.

129-p
05:36.880 --> 05:38.280
Okay, so now I'm gonna go back up

130
05:38.280 --> 05:39.980
and start with the ones that I missed.

131-p
05:39.980 --> 05:41.400
hardwareAcceleration:

132
05:41.400 --> 05:44.910
so the wording here, it reads like a hint.

133
05:44.910 --> 05:45.950
No preference.

134
05:45.950 --> 05:48.190
Prefer hardware.

135
05:48.190 --> 05:51.610
But browsers have the option to treat

136
05:51.610 --> 05:53.570
this as a hint or to treat it as a requirement,

137
05:53.570 --> 05:56.320
and in Chrome, we treat it as a requirement.

138-p
05:56.320 --> 05:57.567
If you say prefer hardware

139
05:57.567 --> 05:59.320
and we don't have the hardware,

140
05:59.320 --> 06:00.820
or if we can't support some aspect

141
06:00.820 --> 06:02.720
of your configuration in hardware,

142
06:02.720 --> 06:06.540
we will fail to configure, which is fine.

143
06:06.540 --> 06:08.400
It can be actually very useful.

144
06:08.400 --> 06:10.800
You can use the isConfigSupported check

145
06:10.800 --> 06:13.313
in advance to figure out where the support will lie.

146
06:14.550 --> 06:15.870
But you could, let's say if you were

147
06:15.870 --> 06:17.280
really worried about power savings

148
06:17.280 --> 06:18.440
and you had a lot of flexibility

149
06:18.440 --> 06:20.180
in the codec that you were choosing,

150
06:20.180 --> 06:22.570
you could use this to iterate over options

151
06:22.570 --> 06:26.130
on the platform to see, okay, it has accelerated encoding

152
06:26.130 --> 06:28.830
for 264, but maybe not for VP9,

153
06:28.830 --> 06:30.440
so that's the one I'm gonna use

154
06:30.440 --> 06:31.950
because I'm very power-conscious

155
06:31.950 --> 06:33.743
on this platform, whatever.

156
06:36.110 --> 06:38.350
Or maybe you have a WASM fallback that you prefer.

157
06:38.350 --> 06:42.640
You wanna use our hardware encoding,

158
06:42.640 --> 06:44.130
but if it's gonna be software,

159
06:44.130 --> 06:45.520
you prefer to use your software,

160
06:45.520 --> 06:47.183
and that's also totally fine.

161-p
06:48.170 --> 06:50.800
Most folks will probably just take the default

162
06:50.800 --> 06:53.300
of no preference, and for that default,

163
06:53.300 --> 06:55.420
Chrome will always try to find hardware

164
06:55.420 --> 06:57.670
for the codec and then fall back to software

165
06:57.670 --> 06:59.590
if hardware wasn't available.

166-p
06:59.590 --> 07:02.860
Actually a small caveat on that.

167
07:02.860 --> 07:06.470
It will find hardware above a certain resolution cut-off.

168
07:06.470 --> 07:08.600
Below a certain resolution point,

169
07:08.600 --> 07:13.200
using a hardware-accelerated codec is not desirable.

170
07:13.200 --> 07:14.960
It actually can be a little bit

171
07:14.960 --> 07:17.250
more in startup costs and no savings in power,

172
07:17.250 --> 07:18.750
in which case we use software.

173-p
07:19.880 --> 07:22.100
All right, scalabilityMode.

174
07:22.100 --> 07:24.120
This is a string that identifies patterns

175
07:24.120 --> 07:25.843
of layering for scalable codecs.

176
07:26.810 --> 07:28.590
For media production, you probably don't care about this.

177
07:28.590 --> 07:30.583
You probably just want one layer.

178
07:31.480 --> 07:34.700
This is probably more interesting for RTC folks.

179
07:34.700 --> 07:36.570
The lead spec here, WebRTC SVC,

180
07:36.570 --> 07:38.390
has lots more details in the diagrams

181
07:38.390 --> 07:40.743
and patterns of scalability layering.

182
07:42.860 --> 07:44.460
And then finally latencyMode.

183
07:44.460 --> 07:49.460
This is, by default, "quality",

184
07:49.710 --> 07:52.970
where the other option is, what is it?

185
07:52.970 --> 07:53.803
"realtime".

186
07:54.750 --> 07:57.783
Most folks in this group probably want quality,

187
07:58.770 --> 08:00.240
but it's interesting to talk about realtime,

188
08:00.240 --> 08:03.850
because obviously very useful for realtime scenarios.

189
08:03.850 --> 08:06.800
But there's an interaction with some of the knobs above,

190
08:06.800 --> 08:08.300
which is that, in realtime, we strive

191
08:08.300 --> 08:13.300
to get the frames out and achieve the bit rate target

192
08:14.900 --> 08:16.910
and the frame rate target more strictly.

193
08:16.910 --> 08:19.310
We'll actually use frame rate as kind of a deadline.

194
08:19.310 --> 08:23.460
If we can't encode a frame in realtime mode

195
08:24.947 --> 08:28.280
and maintain the frame rate, in terms of our output,

196
08:28.280 --> 08:33.280
then we will drop frames, where encoders support that.

slide-5
08:35.350 --> 08:38.330
Okay, so those are our different knobs

198
08:38.330 --> 08:39.483
that we have so far.

199
08:40.520 --> 08:42.610
This is a link to our GitHub.

200
08:42.610 --> 08:44.810
Please let us know what you need.

201
08:44.810 --> 08:46.670
We like to prioritize things by impact.

202
08:46.670 --> 08:50.950
If you can tell us why you need it,

203
08:50.950 --> 08:52.900
what is it you plan to do with it,

204
08:52.900 --> 08:56.473
how is it gonna be a better experience for your users,

205
08:57.560 --> 09:01.180
if you come to our GitHub and you already see an issue filed

206
09:01.180 --> 09:04.500
for the knob that you want, pile on.

207
09:04.500 --> 09:06.550
Again, that's impact, to say, hey,

208
09:06.550 --> 09:09.210
there's five apps that want this knob.

209
09:09.210 --> 09:11.210
Okay, we'll pay attention to that, sure.

210-p
09:12.350 --> 09:13.420
Yeah, that's it.

211
09:13.420 --> 09:14.970
Thank you so much for watching.

