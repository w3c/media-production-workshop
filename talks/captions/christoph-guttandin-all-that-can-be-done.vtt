WEBVTT

1
00:07.400 --> 00:08.840
Hi everyone, thanks for having me.

2
00:08.840 --> 00:11.680
It’s a real pleasure to be a part of this workshop.

4-p
00:11.720 --> 00:14.480
I titled my talk "Whatever can be done will be done".

5
00:14.480 --> 00:17.500
And I hope it becomes apparent in the end why I did so.

slide-2
00:19.240 --> 00:21.800
I’m Christoph Guttandin. I have a company

8
00:21.800 --> 00:23.600
called Media Codings. And I do freelance work

9
00:23.600 --> 00:25.000
for various other companies

10
00:25.000 --> 00:27.400
and I guess the two most interesting

11
00:27.400 --> 00:28.360
in the context of this workshop

12
00:28.360 --> 00:31.760
are Source Elements and InVideo.

14-p
00:31.760 --> 00:33.320
I’m usually named chrisguttandin

15
00:33.320 --> 00:35.800
anywhere on the internet.

16
00:35.800 --> 00:36.680
So in case you want to chat with me

17
00:36.680 --> 00:38.600
please feel free to reach out.

18
00:38.600 --> 00:41.120
Just send me a message on the platform of your choice.

slide-3
00:43.720 --> 00:46.100
When I was asked to prepare a talk for this workshop

21
00:46.100 --> 00:47.520
I thought it’s a great opportunity

22
00:47.520 --> 00:49.800
to present our wishes to the world.

23
00:49.800 --> 00:53.500
So I asked my co-workers to help me prepare a list

24
00:53.500 --> 00:55.120
with the things that we would like to implement

25
00:55.120 --> 00:57.840
at some point or which we implemented already

26
00:57.840 --> 01:00.000
but would really like to implement in a better way

27
01:00.000 --> 01:00.560
if possible.

slide-4
01:03.100 --> 01:06.400
The first item on our list is using custom codecs with WebRTC.

slide-5
01:08.720 --> 01:10.840
Doing this has been possible for a while

32
01:10.840 --> 01:13.840
at least to a certain extent.

33
01:13.840 --> 01:16.280
You can do it by encoding the audio data

34
01:16.280 --> 01:18.400
and video data yourself.

35
01:18.400 --> 01:20.560
And then you would ignore the media functionality

36
01:20.560 --> 01:24.320
of WebRTC and send the data over a DataChannel.

37
01:24.320 --> 01:26.360
But the whole process is very cumbersome and

38
01:26.360 --> 01:29.560
at least for video it’s not very accurate as well.

39
01:29.560 --> 01:32.120
Every video frame needs to be drawn to a canvas

40
01:32.120 --> 01:33.760
and then it needs to be grabbed from there

41
01:33.760 --> 01:36.800
to hand it over to WebAssembly.

42
01:36.800 --> 01:38.560
It’s very likely that you miss a few frames

43
01:38.560 --> 01:39.840
when doing this with a live feed.

slide-6
01:41.840 --> 01:44.400
Luckily this is not necessary anymore

46
01:44.400 --> 01:46.560
since we can now use WebCodecs to do this

47
01:46.560 --> 01:47.720
in a much more efficient way.

49-p
01:47.720 --> 01:51.720
But WebCodecs are only available in Chromium browsers

50
01:51.720 --> 01:55.100
so far. Firefox is working on it. But unfortunately

51
01:55.100 --> 01:57.280
it’s unclear to me what Apple is thinking about it.

slide-7
01:59.520 --> 02:02.320
The next item in our list is partial decoding.

55-p
02:02.320 --> 02:04.720
And with that we mean the ability to only decode

56
02:04.720 --> 02:06.800
a certain range or maybe only

57
02:06.800 --> 02:08.320
one specific frame of a media asset.

slide-8
02:09.800 --> 02:12.240
There is a very hacky way to do this for audio

60
02:12.240 --> 02:16.500
which works by using the decodeAudioData() method.

61
02:16.500 --> 02:18.840
This method is available on an AudioContext.

62
02:18.840 --> 02:21.280
Unfortunately it automatically re-samples the audio

63
02:21.280 --> 02:23.680
to the sampleRate of the AudioContext.

64
02:23.680 --> 02:26.200
That means the file needs to be parsed manually

65
02:26.200 --> 02:27.720
to know the correct sampleRate

66
02:27.720 --> 02:29.280
before doing the actual decoding.

67
02:29.280 --> 02:34.320
And decodeAudioData() only works with full files

68
02:34.320 --> 02:36.500
which is another reason why the file

69
02:36.500 --> 02:38.680
needs to be parsed before the decoding.

70
02:38.680 --> 02:40.480
We need to find out where it can be sliced.

71
02:40.480 --> 02:43.840
This is not that easy to figure out

72
02:43.840 --> 02:46.160
but it’s possible for most file types.

73
02:46.160 --> 02:48.000
And when done correctly and you’re lucky

74
02:48.000 --> 02:51.840
decodeAudioData() will happily decode a part of a file

75
02:51.840 --> 02:54.640
because it believes that it’s decoding the full file.

77-p
02:56.800 --> 02:59.400
Sadly though decodeAudioData() is really broken

78
02:59.400 --> 03:01.120
in the newest version of Safari.

79
03:01.120 --> 03:03.560
Apparently the bug is already fixed in the codebase.

80
03:03.560 --> 03:06.400
But no one knows when that fix will be available

81
03:06.400 --> 03:07.560
for Safari users.

83-p
03:07.560 --> 03:13.720
To decode a single video frame one could load the video

84
03:13.720 --> 03:16.000
with a media element and then use seekToNextFrame()

85
03:16.000 --> 03:17.320
to get the frames one by one.

87-p
03:19.100 --> 03:21.200
But sadly this only works in Firefox.

slide-9
03:21.200 --> 03:25.120
But again all of this is not necessary anymore

90
03:25.120 --> 03:27.720
now that we have WebCodecs support in Chromium

91
03:27.720 --> 03:29.400
and soon in Firefox.

slide-10
03:31.560 --> 03:33.240
Another thing which is crucial for us is

94
03:33.240 --> 03:36.120
to offload as much as we can to other threads.

95
03:36.120 --> 03:38.200
In the end the main thread should just be there

96
03:38.200 --> 03:40.120
for triggering the work but not for doing it.

slide-11
03:40.120 --> 03:43.640
There are a number of APIs which

99
03:43.640 --> 03:45.000
follow this pattern already.

100
03:45.000 --> 03:47.100
One of them is the AudioWorklet

101
03:47.100 --> 03:48.640
and the Web Audio API in general.

103-p
03:48.640 --> 03:52.120
For video content there is the OffscreenCanvas

104
03:52.120 --> 03:54.100
which can be used from within a Web Worker.

106-p
03:54.100 --> 03:57.280
And last but not least it’s possible to insert

107
03:57.280 --> 03:59.160
a TransformStream into a MediaStream

108
03:59.160 --> 04:01.840
and transfer that to a Web Worker as well.

110-p
04:01.840 --> 04:05.720
But as you can see browser support for anything

111
04:05.720 --> 04:07.680
but the Web Audio API is not that great.

112
04:07.680 --> 04:10.560
Chromium supports all of those APIs.

113
04:10.560 --> 04:13.680
Firefox has an OffscreenCanvas implementation

114
04:13.680 --> 04:16.280
behind a flag but didn’t say anything about

115
04:16.280 --> 04:17.680
transferable streams so far.

116
04:17.680 --> 04:20.760
And as usual I don’t even dare to guess when

117
04:20.760 --> 04:23.500
this will be available in Webkit or Safari.

slide-12
04:23.500 --> 04:28.600
Another thing which is often tricky for us

120
04:28.600 --> 04:29.840
is to keep media in sync.

122-p
04:29.840 --> 04:32.480
Especially if there is some audio or video

123
04:32.480 --> 04:35.400
processing involved which will delay one or the other

124
04:35.400 --> 04:38.640
making sure audio and video appear to be sync again

125
04:38.640 --> 04:40.440
when played back becomes very tricky.

slide-13
04:40.440 --> 04:45.120
There are two properties on an AudioContext

128
04:45.120 --> 04:47.440
which allow us to know when a sound scheduled

129
04:47.440 --> 04:50.800
on that AudioContext can actually be heard by the user.

130
04:50.800 --> 04:53.680
And this allows us to make sure the video frame

131
04:53.680 --> 04:56.200
displayed at that time matches the audio.

133-p
04:56.200 --> 04:59.360
But sadly these properties only fully work

134
04:59.360 --> 05:02.200
in Firefox so far. I guess I don’t have to

135
05:02.200 --> 05:04.160
mention anymore for which browser I don’t know

136
05:04.160 --> 05:06.320
when they will be available or if

137
05:06.320 --> 05:07.600
they become available at all.

slide-14
05:07.600 --> 05:13.500
Another hot topic for us is the possibility

140
05:13.500 --> 05:15.760
to select a certain output device instead of

141
05:15.760 --> 05:16.720
using the default one.

slide-15
05:16.720 --> 05:20.480
There is a method one can call to change

144
05:20.480 --> 05:22.200
the output device of a media element

145
05:22.200 --> 05:24.320
but it only works in Chromium browsers so far.

146
05:24.320 --> 05:26.480
It’s called setSinkId().

148-p
05:26.480 --> 05:30.120
And as far as I know Firefox is currently implementing

149
05:30.120 --> 05:33.400
the selectAudioOutput() method which is a new way to

150
05:33.400 --> 05:35.760
give consent to access audio output devices.

151
05:35.760 --> 05:38.480
And this is basically what blocks them from

152
05:38.480 --> 05:39.640
enabling setSinkId().

154-p
05:39.640 --> 05:43.800
Chromium browsers expose the audio output devices already.

155
05:43.800 --> 05:46.000
Therefore implementing selectAudioOutput() is not

156
05:46.000 --> 05:48.440
really necessary to use setSinkId().

158-p
05:48.440 --> 05:52.640
But as usual I don’t have an idea what Apple is up to.

slide-16
05:52.640 --> 05:57.640
So when looking at the wishlist again

161
05:57.640 --> 05:59.400
it looks like it became a todo list.

162
05:59.400 --> 06:03.500
All those things can be done now and existing hacks

163
06:03.500 --> 06:05.800
can be replaced with solid implementations,

164
06:05.800 --> 06:07.600
either today or in the near future.

166-p
06:07.600 --> 06:10.680
At least if we ignore Safari for now.

168-p
06:10.680 --> 06:14.720
Anyway, I came up with some more wishes

169
06:14.720 --> 06:16.560
which aren’t really spec related anymore

170
06:16.560 --> 06:18.800
and are more geared towards the implementers.

slide-17
06:18.800 --> 06:24.800
The first item on that list is that I wish for

173
06:24.800 --> 06:25.760
releases to be as boring as possible.

175-p
06:25.760 --> 06:29.100
I think Chromium browsers and Firefox do have

176
06:29.100 --> 06:30.800
a pretty good process to ensure that already.

slide-18
06:30.800 --> 06:36.280
Both browsers publish a nightly build.

179
06:36.280 --> 06:38.560
Right now this is version 97 for Chromium

180
06:38.560 --> 06:41.760
and 95 for Firefox. But the exact numbers

181
06:41.760 --> 06:43.880
don’t really matter here.

183-p
06:43.880 --> 06:46.360
Every 4 weeks the state of the nightly version

184
06:46.360 --> 06:48.800
gets promoted to the next stage.

slide-19
06:48.800 --> 06:50.760
Whatever has been the nightly version at that time

187
06:50.760 --> 06:52.000
becomes the beta version.

188
06:52.000 --> 06:55.240
Likewise the nightly version will increase as well.

189
06:55.240 --> 06:58.880
So it’s clear that whatever is in the nightly versions

190
06:58.880 --> 07:02.160
of those browsers today will be in beta

191
07:02.160 --> 07:03.160
in at least 4 weeks.

slide-20
07:03.160 --> 07:07.200
Another 4 weeks later the beta version

194
07:07.200 --> 07:09.600
becomes the stable version and the nightly version

195
07:09.600 --> 07:11.400
- whatever that will be at that time -

196
07:11.400 --> 07:13.100
becomes the new beta version.

198-p
07:13.100 --> 07:16.400
It’s like a steady stream of updates.

199
07:16.400 --> 07:19.400
And by the time a feature reaches the beta channel

200
07:19.400 --> 07:22.320
you can calculate the date at which it becomes available

201
07:22.320 --> 07:23.600
to all regular users.

203-p
07:23.600 --> 07:26.800
The whole process is very predictable

204
07:26.800 --> 07:28.840
and yes it's also super boring.

206-p
07:28.840 --> 07:32.800
I usually test my code against the nightly versions

207
07:32.800 --> 07:35.100
to check regressions coming down the pipe and

208
07:35.100 --> 07:37.720
to make sure there will be no surprises (at least for me)

209
07:37.720 --> 07:41.280
when a new version of Chromium or Firefox gets published.

slide-21
07:41.280 --> 07:46.160
Sadly things are a bit different with Safari.

212
07:46.160 --> 07:48.840
There is a Technology Preview of Safari

213
07:48.840 --> 07:52.280
which is currently at version 133.

214
07:52.280 --> 07:55.720
It contains a lot of experimental and unfinished

215
07:55.720 --> 07:57.680
implementations of upcoming features.

217-p
07:57.680 --> 08:01.640
But it is unknown which of those features end up

218
08:01.640 --> 08:03.280
in the next stable release of Safari.

219
08:03.280 --> 08:05.680
They treat it as a secret.

220
08:05.680 --> 08:09.680
The Technology Preview and the stable Safari have

221
08:09.680 --> 08:11.520
completely unrelated version numbers.

222
08:11.520 --> 08:14.160
I guess the stable version is a subset of

223
08:14.160 --> 08:17.320
the Technology Preview but I can’t really say that for sure.

225-p
08:17.320 --> 08:21.100
There is no way for developers to test their apps

226
08:21.100 --> 08:23.720
with what becomes the next stable version of Safari.

227
08:23.720 --> 08:26.440
Testing it is only possible after it got already

228
08:26.440 --> 08:27.520
released to all the users.

230-p
08:27.520 --> 08:30.680
This is of course challenging when you try to build

231
08:30.680 --> 08:34.520
a reliable web app that users can trust

232
08:34.520 --> 08:35.800
to work as expected.

234-p
08:35.800 --> 08:40.680
Another problem is that the stable version of Safari

235
08:40.680 --> 08:42.400
gets only updated every 6 months.

236
08:42.400 --> 08:45.240
Which means the minimum lifetime of regressions

237
08:45.240 --> 08:46.520
is usually 6 months.

238
08:46.520 --> 08:49.400
And since regressions can’t get caught before

239
08:49.400 --> 08:52.360
they get released, regressions are really not

240
08:52.360 --> 08:53.480
unheard of in Safari.

242-p
08:53.480 --> 08:57.800
As I said there is currently one which breaks

243
08:57.800 --> 08:59.800
decodeAudioData() and another one which breaks

244
08:59.800 --> 09:01.280
audio streams in WebRTC.

slide-22
09:01.280 --> 09:05.400
This leads me to my next wish.

248-p
09:05.400 --> 09:09.100
I would love regressions to get fixed as soon as possible.

250-p
09:09.100 --> 09:12.400
Imagine building a web app that media professionals

251
09:12.400 --> 09:15.480
rely on to get their work done on every single day.

252
09:15.480 --> 09:19.680
And suddenly a browser update causes that app to fail.

254-p
09:19.680 --> 09:25.600
I know that even Safari can get security updates

255
09:25.600 --> 09:26.600
in a very timely manner.

256
09:26.600 --> 09:29.200
And I would love that to happen for patches

257
09:29.200 --> 09:30.360
to fix regressions, too.

slide-23
09:30.360 --> 09:37.800
I know some powerful features have the potential

260
09:37.800 --> 09:39.480
to get abused by malicious pages.

261
09:39.480 --> 09:43.100
And I definitely agree that certain features

262
09:43.100 --> 09:45.400
should not be enabled by default for each and every page.

264-p
09:45.400 --> 09:48.720
However I think the users of a browser

265
09:48.720 --> 09:51.320
should have the option to allow certain sites

266
09:51.320 --> 09:53.440
to access the file system,

267
09:53.440 --> 09:54.680
to record the whole screen,

268
09:54.680 --> 09:56.680
to capture the system audio,

269
09:56.680 --> 09:57.880
to receive MIDI messages,

270
09:57.880 --> 10:00.500
to run high priority threads

271
10:00.500 --> 10:03.800
and so on and so on.

273-p
10:03.800 --> 10:05.500
I think this doesn’t need to be an explicit

274
10:05.500 --> 10:06.480
permission prompt in every case.

275
10:06.480 --> 10:09.800
It could also be a little toast-style message

276
10:09.800 --> 10:11.680
that pops up to notify the users about the usage

277
10:11.680 --> 10:14.400
of a certain API or something totally different.

279-p
10:14.400 --> 10:18.800
The point is I think the users should be empowered

280
10:18.800 --> 10:21.880
to decide themselves which features they want to enable

281
10:21.880 --> 10:24.500
and which ones they better don’t want to use right now.

slide-24
10:24.500 --> 10:30.500
Similarly as a developer I would really love to

284
10:30.500 --> 10:32.720
have the same power. As I said before I like to run

285
10:32.720 --> 10:35.480
automated tests against the current

286
10:35.480 --> 10:37.360
and the upcoming version of each browser.

288-p
10:37.360 --> 10:41.500
I do this locally and I also do this in the cloud

289
10:41.500 --> 10:43.120
with services like BrowserStack and Sauce Labs.

291-p
10:43.120 --> 10:46.280
It’s a real challenge to test media APIs

292
10:46.280 --> 10:49.100
because they usually require user interaction to work.

293
10:49.100 --> 10:51.640
But there is obviously no user

294
10:51.640 --> 10:52.880
when running automated tests.

296-p
10:52.880 --> 10:57.000
There are flags that one can set for Chromium browsers

297
10:57.000 --> 11:01.280
and Firefox. But they are not really very well documented

298
11:01.280 --> 11:04.640
and they always lag behind the capabilities of

299
11:04.640 --> 11:08.000
the browser and sadly they have the tendency to break

300
11:08.000 --> 11:08.760
from time to time.

302-p
11:08.760 --> 11:14.440
And at least as far as I know it’s not even possible

303
11:14.440 --> 11:17.520
to disable the autoplay policy in Safari

304
11:17.520 --> 11:20.500
when starting the browser programmatically.

305
11:20.500 --> 11:24.000
That means things are more difficult to test in Safari.

306
11:24.000 --> 11:27.160
Which in turn means bugs get less caught.

307
11:27.160 --> 11:29.360
And this is of course a real problem since

308
11:29.360 --> 11:32.400
as I said before a typical bug stays in Safari

309
11:32.400 --> 11:33.280
for at least 6 months.

310
11:33.280 --> 11:36.400
But only if it gets caught in the first place.

slide-25
11:36.400 --> 11:42.720
Another thing which is of course totally different

313
11:42.720 --> 11:45.600
but I think is a bit problematic as well is that

314
11:45.600 --> 11:48.400
building web apps seems to be so easy at first glance.

315
11:48.400 --> 11:51.440
Last week I saw a full WebCodecs example which fit

316
11:51.440 --> 11:52.400
on a single slide.

317
11:52.400 --> 11:55.560
That was very impressive and it showed that

318
11:55.560 --> 11:57.800
one could build something really powerful in no time.

320-p
11:57.800 --> 12:00.720
And yes, that’s absolutely true.

321
12:00.720 --> 12:03.560
I did for example quickly hack together a little app

322
12:03.560 --> 12:05.240
to record this talk in the browser.

323
12:05.240 --> 12:08.320
I didn’t use it in the end but that’s a different story.

324
12:08.320 --> 12:12.440
But building a real web app which is meant to be used

325
12:12.440 --> 12:15.640
by people in a professional context day in and day out

326
12:15.640 --> 12:17.560
is a completely different story.

327
12:17.560 --> 12:21.680
Doing that requires a lot of effort.

329-p
12:21.720 --> 12:25.320
I think many people underestimate the amount of work

330
12:25.320 --> 12:27.600
that needs to be done to build a full product on the web.

332-p
12:27.600 --> 12:30.760
I honestly think building professional apps

333
12:30.760 --> 12:32.560
is challenging in any environment

334
12:32.560 --> 12:35.880
and I wouldn’t expect to be easy on the web.

slide-26
12:35.880 --> 12:40.600
But after all I think it’s mostly a

337
12:40.600 --> 12:41.720
chicken and egg problem.

338
12:41.720 --> 12:45.120
Once a few well known and well established web apps

339
12:45.120 --> 12:48.440
exist that have wide adoption among media professionals

340
12:48.440 --> 12:51.400
others will become interested in bringing there apps

341
12:51.400 --> 12:52.240
to the web as well.

343-p
12:52.240 --> 12:56.200
Source Elements does for example have a plugin for DAWs.

344
12:56.200 --> 12:59.320
It’s currently a native application since the DAWs

345
12:59.320 --> 13:00.600
that it’s meant to be used with are

346
13:00.600 --> 13:02.360
native applications as well.

347
13:02.360 --> 13:05.800
And this could only ever change if the DAWs

348
13:05.800 --> 13:06.480
become web apps at some point.

350-p
13:06.480 --> 13:10.400
There is definitely still a long way to go

351
13:10.400 --> 13:12.320
but I think the shift has already begun.

slide-27
13:12.320 --> 13:15.600
In conclusion I would like to repeat

354
13:15.600 --> 13:17.500
the title of this talk again:

355
13:17.500 --> 13:20.400
"A fundamental rule in technology says

356
13:20.400 --> 13:21.600
whatever can be done will be done.".

358-p
13:21.600 --> 13:25.500
I think building professional media applications

359
13:25.500 --> 13:27.500
for the web is something that can be done today.

360
13:27.500 --> 13:29.600
And I know many people working on it.

361
13:29.600 --> 13:34.240
I hope and believe it’s only a matter of time

362
13:34.240 --> 13:35.760
until that becomes the new normal.

slide-28
13:35.800 --> 13:40.480
Thanks again to the people I work with

365
13:40.480 --> 13:42.160
for helping me to prepare this talk

366
13:42.160 --> 13:44.840
and many thanks to all of you for watching it.

367
13:44.840 --> 13:47.900
See you at the workshop. Bye.
